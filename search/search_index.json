{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u4f7f\u7528 SAGE \u7cfb\u7edf\uff01","text":"<p>SAGE \u662f\u4e00\u4e2a\u9ad8\u6548\u3001\u6a21\u5757\u5316\u7684\u63a8\u7406\u7ba1\u9053\u5f15\u64ce\uff0c\u652f\u6301\u591a\u6a21\u6001\u6570\u636e\u3001\u6d41\u5f0f\u5904\u7406\u548c\u5411\u91cf\u589e\u5f3a\u63a8\u7406\u3002</p>"},{"location":"about/","title":"\ud83e\udde0 SAGE: A Dataflow-Native Framework for LLM Reasoning <p>SAGE is a dataflow-native reasoning framework built from the ground up to support modular, controllable, and transparent workflows over Large Language Models (LLMs). It addresses common problems in existing LLM-augmented systems (like RAG and Agents), such as hard-coded orchestration logic, opaque execution paths, and limited runtime control. SAGE introduces a dataflow-centric abstraction, modeling reasoning workflows as directed acyclic graphs (DAGs) composed of typed operators.</p> <p></p>","text":""},{"location":"about/#features","title":"\u2728 Features","text":"<ul> <li> <p>\ud83e\udde9 Declarative &amp; Modular Composition: Build complex reasoning pipelines from typed, reusable operators. The dataflow graph cleanly separates what to compute from how to compute it.</p> </li> <li> <p>\ud83d\udd00 Unified Data and Control Flow: Express conditional branching, tool routing, and fallback logic declaratively within the graph structure, eliminating brittle, imperative control code.</p> </li> <li> <p>\ud83d\udcbe Native Stateful Operators: Memory is a first-class citizen. Model session, task, and long-term memory as stateful nodes directly within the graph for persistent, context-aware computation.</p> </li> <li> <p>\u26a1 Asynchronous &amp; Resilient Runtime: The engine executes DAGs asynchronously in a non-blocking, data-driven manner. It features stream-aware queues, event-driven scheduling, and built-in backpressure to handle complex workloads gracefully.</p> </li> <li> <p>\ud83d\udcca Built-in Observability &amp; Introspection: An interactive dashboard provides runtime instrumentation out-of-the-box. Visually inspect execution graphs, monitor operator-level metrics, and debug pipeline behavior in real-time.</p> </li> </ul>"},{"location":"about/#installation","title":"\ud83d\udd27 Installation","text":"<p>To accommodate different user environments and preferences, we provide comprehensive setup scripts that support multiple installation modes. Simply run the top-level <code>./setup.sh</code> script and choose from the following four installation options:</p> <pre><code>./setup.sh\n</code></pre> <p>You will be prompted to select one of the following modes:</p> <ol> <li>Minimal Setup    Set up only the Conda environment.</li> </ol> <p>To start with Minimal Setup, you need:</p> <pre><code>- Conda (Miniconda or Anaconda)\n- Python \u2265 3.11\n- Hugging Face CLI\n</code></pre> <ol> <li> <p>Setup with Docker    Launches a pre-configured Docker container and sets up the Conda environment inside it.</p> </li> <li> <p>Full Setup    Launches the Docker container, installs all required dependencies (including CANDY, our in-house vector database), and sets up the Conda environment.</p> </li> </ol> <p>Alternatively, you can install the project manually:</p> <ol> <li>Create a new Conda environment with Python \u2265 3.11:</li> </ol> <p><code>bash    conda create -n sage python=3.11    conda activate sage</code></p> <ol> <li>Install the package from the root directory:</li> </ol> <p><code>bash    pip install .</code></p> <p>This method is recommended for advanced users who prefer manual dependency management or wish to integrate the project into existing workflows.</p>"},{"location":"about/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"about/#memory-toolkit","title":"\ud83e\udde0 Memory Toolkit","text":"<p>Memory provides a lightweight in-memory vector database (VDB) supporting text embeddings, vector indexing, multi-index management, metadata filtering, persistence to disk, and recovery.</p>"},{"location":"about/#1-initialize-vector-db-and-embedding-model","title":"(1). Initialize Vector DB and Embedding Model","text":"<pre><code>mgr = MemoryManager()\nembedder = MockTextEmbedder(fixed_dim=16)\ncol = mgr.create_collection(\n    name=\"test_vdb\",\n    backend_type=\"VDB\",\n    description=\"test VDB\",\n    embedding_model=embedder,\n    dim=16\n)\n\u200b````\n\n\n#### (2). Insert Text Entries with Metadata\n\n\u200b```python\ncol.add_metadata_field(\"tag\")\ncol.insert(\"Alpha\", {\"tag\": \"A\"})\ncol.insert(\"Beta\", {\"tag\": \"B\"})\ncol.insert(\"Gamma\", {\"tag\": \"A\"})\n</code></pre>"},{"location":"about/#3-create-indexes-eg-filtered-by-metadata","title":"(3). Create Indexes (e.g., Filtered by Metadata)","text":"<pre><code>col.create_index(\"global_index\")\ncol.create_index(\"tag_A_index\", metadata_filter_func=lambda m: m.get(\"tag\") == \"A\")\n</code></pre>"},{"location":"about/#4-retrieve-similar-vectors","title":"(4). Retrieve Similar Vectors","text":"<pre><code>res1 = col.retrieve(\"Alpha\", topk=1, index_name=\"global_index\")\nres2 = col.retrieve(\"Alpha\", topk=5, index_name=\"tag_A_index\")\n</code></pre>"},{"location":"about/#5-persist-collection-to-local-disk","title":"(5). Persist Collection to Local Disk","text":"<pre><code>mgr.store_collection()\nprint(\"Saved to:\", mgr.data_dir)\n</code></pre>"},{"location":"about/#6-reload-persisted-collection-requires-embedding-model","title":"(6). Reload Persisted Collection (Requires Embedding Model)","text":"<pre><code>mgr2 = MemoryManager()\nembedder2 = MockTextEmbedder(fixed_dim=16)\ncol2 = mgr2.connect_collection(\"test_vdb\", embedding_model=embedder2)\n</code></pre>"},{"location":"about/#7-delete-all-persisted-data-optional","title":"(7). Delete All Persisted Data (Optional)","text":"<pre><code>VDBMemoryCollection.clear(\"test_vdb\", mgr.data_dir)\nmanager_json = os.path.join(mgr.data_dir, \"manager.json\")\nif os.path.exists(manager_json):\n    os.remove(manager_json)\n</code></pre>"},{"location":"about/#step-by-step-build-a-local-rag-pipeline","title":"\ud83d\udd27 Step-by-Step: Build a Local RAG Pipeline","text":"<p>SAGE uses a fluent-style API to declaratively define RAG pipelines. Here's how to get started:</p> <pre><code>from sage_core.api.env import LocalEnvironment\nfrom sage_common_funs.io.source import FileSource\nfrom sage_common_funs.rag.retriever import DenseRetriever\nfrom sage_common_funs.rag.promptor import QAPromptor\nfrom sage_common_funs.rag.generator import OpenAIGenerator\nfrom sage_common_funs.io.sink import TerminalSink\nfrom sage_utils.config_loader import load_config\n\nconfig = load_config(\"config.yaml\")\n\nenv = LocalEnvironment()\nenv.set_memory(config=None)\n\nquery_stream = (env\n   .from_source(FileSource, config[\"source\"])\n   .map(DenseRetriever, config[\"retriever\"])\n   .map(QAPromptor, config[\"promptor\"])\n   .map(OpenAIGenerator, config[\"generator\"])\n   .sink(TerminalSink, config[\"sink\"])\n)\n\ntry:\n   env.submit()\n   env.run_once() \n   time.sleep(5) \n   env.stop()\nfinally:\n   env.close()\n\n</code></pre>"},{"location":"about/#about-config","title":"\ud83d\udcd8 About config","text":"<p>Each operator in the pipeline requires a configuration dictionary config that provides runtime parameters. You can find example config.yaml under config.</p>"},{"location":"about/#about-ray","title":"\ud83d\udcd8 About Ray","text":"<p>To enable distributed execution using Ray, you can use RemoteEnvironment.</p> <pre><code>env = RemoteEnvironment()\n</code></pre>"},{"location":"about/#about-long-running","title":"\ud83d\udcd8 About Long Running","text":"<p>If your pipeline is meant to run as a long-lived service, use:</p> <pre><code>env.run_streaming() \n</code></pre> <p>See more examples under sage_examples</p>"},{"location":"about/#components","title":"\ud83e\udde9 Components","text":""},{"location":"about/#operator","title":"Operator","text":"<p>SAGE follows a Flink-style pipeline architecture where each <code>Operator</code> acts as a modular and composable processing unit. Operators can be chained together using a fluent API to form a streaming data pipeline. Internally, each <code>Operator</code> wraps a stateless or stateful <code>Function</code> that defines its core logic.</p>"},{"location":"about/#supported-operators","title":"\ud83d\udd27 Supported Operators","text":"Operator Method Description <code>from_source()</code> Adds a <code>SourceFunction</code> to read input data from external systems. <code>map()</code> Applies a stateless <code>Function</code> to each element of the stream, one-to-one transformation. <code>flatmap()</code> Similar to <code>map()</code>, but allows one input to emit zero or more outputs (many-to-many). <code>sink()</code> Defines the terminal output of the stream, consuming the final data (e.g., write to terminal, file, database)."},{"location":"about/#supported-fuction","title":"\ud83d\udd27 Supported Fuction","text":"Fuction Type Description <code>SourceOperator</code> Entry point of the pipeline. Ingests input data from external sources such as files, APIs, or user queries. <code>RetrievalOperator</code> Performs dense or hybrid retrieval from a vector database or document store based on the input query. <code>RerankOperator</code> Reorders retrieved documents using a reranker model (e.g., cross-encoder) to improve relevance. <code>RefineOperator</code> Compresses or filters retrieved context to reduce input length for faster and more accurate model inference. <code>PromptOperator</code> Builds model-ready prompts by formatting the query and context into a specific template or structure. <code>GenerationOperator</code> Generates answers using a large language model (e.g., OpenAI, LLaMA, vLLM) based on the constructed prompt. <code>SinkOperator</code> Terminal point of the pipeline. Outputs final results to various sinks like terminal, files, databases, or APIs. <code>AgentOperator</code> Enables multi-step decision-making agents that call tools or external APIs based on reasoning strategies. <code>EvaluateOperator</code> Calculates metrics like F1, ROUGE, BLEU for model output evaluation. Often used in test/evaluation pipelines. <code>RoutingOperator</code> Implements conditional branching or fallback logic within the pipeline (e.g., skip generation if retrieval fails)."},{"location":"about/#memory","title":"Memory","text":""},{"location":"about/#engine","title":"Engine\uff08\u6267\u884c\u5f15\u64ce\uff09","text":"<p>Sage Engine is the core execution component that orchestrates the compilation and execution of data flow pipelines. It uses a layered architecture to transform logical pipelines into physical execution graphs and efficiently execute them across different runtime environments, supporting both local multi-thread accleration or execution on distributed platrofms.</p>"},{"location":"about/#how-it-works","title":"How It Works","text":"<p>The Engine operates in four main phases:</p> <ol> <li>Pipeline Collection: Gathers user-defined logical pipelines built through DataStream API and validates pipeline integrity</li> <li>Compilation &amp; Optimization: Uses Compiler to transform logical pipelines into optimized physical execution graphs with parallelism expansion</li> <li>Runtime Scheduling: Selects appropriate Runtime (local/distributed) and converts execution graphs into concrete DAG nodes</li> <li>Execution Monitoring: Monitors pipeline execution status, collects performance metrics, and handles fault recovery</li> </ol>"},{"location":"about/#key-features","title":"Key Features","text":"<ul> <li>Declarative Programming: Users describe \"what to do\", Engine handles \"how to do it\"</li> <li>Auto-Parallelization: Automatically determines parallel execution strategies based on data dependencies</li> <li>Platform Agnostic: Same logical pipeline runs on both local and distributed environments</li> <li>Performance Optimization: Combines compile-time optimization with runtime tuning</li> <li>Fault Tolerance: Comprehensive error handling and recovery mechanisms (Under development)</li> </ul>"},{"location":"about/#sage-dashboard","title":"\ud83c\udfa8 SAGE-Dashboard","text":"<p>With the SAGE-Dashboard, you can quickly orchestrate a large model application and run it with one click. Our meticulously designed visual interface will help you efficiently build, monitor, and manage complex workflows!</p>"},{"location":"about/#features_1","title":"\u2728: Features","text":"<ul> <li>DAG Visualization<ul> <li>In the dashboard, the running DAG (Directed Acyclic Graph) is rendered in real-time, making your application workflow clear at a glance.</li> <li>Intuitively displays data flows and component dependencies, simplifying the process of understanding complex applications.</li> </ul> </li> <li>Live Monitoring<ul> <li>During execution, you can observe the resource usage of various components, including operators and memory, in real-time through the built-in dashboard.</li> <li>Operators are annotated with latency heatmaps, queue occupancy, and runtime statistics. Developers can observe the execution flow in real time, trace performance bottlenecks, and monitor memory behavior.</li> </ul> </li> <li>Drag-and-Drop DAG Construction<ul> <li>Quickly assemble a complete DAG workflow by simply arranging and connecting nodes on the canvas, with no need to write complex configuration files.</li> <li>Intuitively define your workflow by dragging and dropping from a rich library of built-in component nodes.</li> </ul> </li> </ul> Show more"},{"location":"about/#experience-our-meticulously-designed-sage-dashboard-both-user-friendly-and-powerful","title":"Experience our meticulously designed Sage -Dashboard both user-friendly and powerful::","text":"<pre><code>cd sage_frontend/sage_server\npython main.py --host 127.0.0.1 --port 8080 --log-level debug\n\ncd ../dashboard\nnpm i \nnpm start\n</code></pre>"},{"location":"about/#license","title":"\ud83d\udd16 License","text":"<p>SAGE is licensed under the MIT License.</p>"},{"location":"get_start/install/","title":"SAGE \u5b89\u88c5\u6307\u5357","text":"<p>\u672c\u6587\u6863\u5c06\u6307\u5bfc\u60a8\u5982\u4f55\u5b89\u88c5 SAGE \u53ca\u5176\u76f8\u5173\u4f9d\u8d56\u3002\u8bf7\u6839\u636e\u60a8\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u5b89\u88c5\u65b9\u5f0f\u3002</p>"},{"location":"get_start/install/#prerequisites","title":"\ud83d\udccb \u524d\u7f6e\u8981\u6c42 (Prerequisites)","text":"<p>\u5728\u5f00\u59cb\u5b89\u88c5\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684\u5f00\u53d1\u73af\u5883\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a</p> <ul> <li>\u64cd\u4f5c\u7cfb\u7edf (OS):<ul> <li>Linux</li> <li>macOS</li> <li>Windows (\u63a8\u8350\u5728 WSL2 \u73af\u5883\u4e0b\u4f7f\u7528)</li> </ul> </li> <li>Python: \u7248\u672c \u2265 3.11\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\uff1a     <code>bash     python --version     # \u6216\u8005 python3 --version</code></li> <li>PIP: Python \u5305\u7ba1\u7406\u5de5\u5177\u3002\u901a\u5e38\u968f Python \u4e00\u8d77\u5b89\u88c5\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\uff1a     <code>bash     pip --version     # \u6216\u8005 pip3 --version</code></li> </ul>"},{"location":"get_start/install/#installation-methods","title":"\ud83d\ude80 \u5b89\u88c5\u65b9\u6cd5 (Installation Methods)","text":"<p>\u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u4e3b\u8981\u7684\u5b89\u88c5\u65b9\u5f0f\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\uff0c\u6211\u4eec\u63a8\u8350\u76f4\u63a5\u4f7f\u7528 <code>.whl</code> \u6587\u4ef6\u8fdb\u884c\u5b89\u88c5\u3002</p>"},{"location":"get_start/install/#wheel","title":"\u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7 Wheel \u6587\u4ef6\u5b89\u88c5 (\u63a8\u8350)","text":"<p>\u8fd9\u662f\u6700\u5feb\u6377\u3001\u6700\u7b80\u5355\u7684\u5b89\u88c5\u65b9\u5f0f\uff0c\u65e0\u9700\u4e0b\u8f7d\u6e90\u7801\uff0c\u9002\u5408\u76f4\u63a5\u90e8\u7f72\u548c\u4f7f\u7528 SAGE\u3002</p> <p>\u7b2c1\u6b65\uff1a\u4e0b\u8f7d Wheel \u6587\u4ef6</p> <p>\u524d\u5f80 SAGE \u7684\u5b98\u65b9\u53d1\u5e03\u9875\u9762\u4e0b\u8f7d\u6700\u65b0\u7684 <code>.whl</code> \u6587\u4ef6\u3002</p> <ul> <li>\u4e0b\u8f7d\u5730\u5740: https://github.com/IntelliStream/SAGE-Pub</li> </ul> <p>\u8bf7\u4e0b\u8f7d\u4e0e\u9879\u76ee\u7248\u672c\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 <code>sage-0.1.0-py3-none-any.whl</code>\u3002</p> <p>\u7b2c2\u6b65\uff1a\u4f7f\u7528 pip \u5b89\u88c5</p> <p>\u6253\u5f00\u60a8\u7684\u7ec8\u7aef\uff08Terminal \u6216\u547d\u4ee4\u63d0\u793a\u7b26\uff09\uff0c\u8fdb\u5165 <code>.whl</code> \u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u7136\u540e\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\uff1a</p> <pre><code># \u5c06\u6587\u4ef6\u540d\u66ff\u6362\u4e3a\u60a8\u4e0b\u8f7d\u7684\u5b9e\u9645\u7248\u672c\npip install sage-0.1.0-py3-none-any.whl\n</code></pre> <p>\u5b89\u88c5\u547d\u4ee4\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u6240\u6709\u5728 requirements.txt \u4e2d\u58f0\u660e\u7684\u4f9d\u8d56\u9879\u4e5f\u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\u3002</p>"},{"location":"get_start/install/#verify-installation","title":"\u2705 \u9a8c\u8bc1\u5b89\u88c5 (Verify Installation)","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4efb\u4e00\u65b9\u5f0f\u6765\u9a8c\u8bc1 SAGE \u662f\u5426\u5df2\u6210\u529f\u5b89\u88c5\u3002</p>"},{"location":"get_start/install/#1","title":"\u65b9\u6cd51\uff1a\u67e5\u770b\u5305\u4fe1\u606f","text":"<p>\u8fd0\u884c pip show \u547d\u4ee4\uff0c\u5982\u679c\u80fd\u770b\u5230 SAGE \u7684\u4fe1\u606f\uff0c\u5219\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002</p> <pre><code>pip show sage\n</code></pre> <p>\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\uff1a</p> <pre><code>Name: sage\nVersion: 0.1.0\nSummary: \nHome-page: [https://github.com/IntelliStream/SAGE](https://github.com/IntelliStream/SAGE)\nAuthor: IntelliStream\nAuthor-email: intellistream@outlook.com\nLicense: \nLocation: /path/to/your/python/site-packages\nRequires: ...\nRequired-by: \n</code></pre>"},{"location":"get_start/install/#2-python","title":"\u65b9\u6cd52\uff1a\u5728 Python \u4e2d\u5bfc\u5165","text":"<p>\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5982\u679c\u6ca1\u6709\u62a5\u9519\uff0c\u5219\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002</p> <pre><code>\npython -c \"import sage; print('\u2705 SAGE package imported successfully!')\"\n</code></pre> <p>\u81f3\u6b64\uff0c\u60a8\u5df2\u6210\u529f\u5b89\u88c5 SAGE\u3002\u795d\u60a8\u4f7f\u7528\u6109\u5feb\uff01</p>"},{"location":"get_start/quickstart/","title":"\u5feb\u901f\u5f00\u59cb Quickstart","text":"<p>\u672c\u8282\u5c06\u5f15\u5bfc\u4f60\u5728\u51e0\u5206\u949f\u5185\u5b8c\u6210 SAGE \u7cfb\u7edf\u7684\u6700\u5c0f\u5316\u8fd0\u884c\uff0c\u4e86\u89e3\u6838\u5fc3\u6a21\u5757\u7684\u8c03\u7528\u65b9\u5f0f\u548c\u6267\u884c\u6d41\u7a0b\u3002\u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u63a8\u8350\u7684\u5165\u95e8\u65b9\u5f0f\uff1a</p> <ul> <li>\u4f7f\u7528 Memory Toolkit \u6784\u9020\u6700\u5c0f\u5b58\u50a8\u4efb\u52a1\u6d41</li> <li>\u4f7f\u7528 Fluent API \u6784\u5efa\u58f0\u660e\u5f0f\u6d41\u6c34\u7ebf\u6267\u884c\u56fe</li> </ul>"},{"location":"get_start/quickstart/#_1","title":"\u2705 \u524d\u63d0\u8981\u6c42","text":"<p>!!! note \"\u73af\u5883\u8981\u6c42\"     \u5728\u6267\u884c\u793a\u4f8b\u524d\uff0c\u8bf7\u786e\u4fdd\u5df2\u5b8c\u6210\u57fa\u672c\u5b89\u88c5\uff08\u53c2\u8003 \u5b89\u88c5\u6307\u5357\uff09\uff0c\u5e76\u6fc0\u6d3b\u76f8\u5e94\u7684 Python/Conda \u73af\u5883\u3002</p>"},{"location":"get_start/quickstart/#1","title":"(1). \u521d\u59cb\u5316\u5411\u91cf\u5e93\u548c\u5d4c\u5165\u6a21\u578b","text":"<pre><code>from sage.core.neuromem.memory_manager import MemoryManager\nfrom sage.core.models.mock_model import MockTextEmbedder\n\nmgr = MemoryManager()\nembedder = MockTextEmbedder(fixed_dim=16)\ncol = mgr.create_collection(\n    name=\"test_vdb\",\n    backend_type=\"VDB\",\n    description=\"test VDB\",\n    embedding_model=embedder,\n    dim=16\n)\n</code></pre>"},{"location":"get_start/quickstart/#2","title":"(2). \u63d2\u5165\u6587\u672c\u53ca\u5143\u6570\u636e","text":"<pre><code>col.add_metadata_field(\"tag\")\ncol.insert(\"Alpha\", {\"tag\": \"A\"})\ncol.insert(\"Beta\", {\"tag\": \"B\"})\ncol.insert(\"Gamma\", {\"tag\": \"A\"})\n</code></pre>"},{"location":"get_start/quickstart/#3","title":"(3). \u521b\u5efa\u7d22\u5f15\uff08\u542b\u5143\u6570\u636e\u8fc7\u6ee4\uff09","text":"<pre><code>col.create_index(\"global_index\")\ncol.create_index(\"tag_A_index\", metadata_filter_func=lambda m: m.get(\"tag\") == \"A\")\n</code></pre>"},{"location":"get_start/quickstart/#4","title":"(4). \u68c0\u7d22\u76f8\u4f3c\u6587\u672c","text":"<pre><code>res1 = col.retrieve(\"Alpha\", topk=1, index_name=\"global_index\")\nres2 = col.retrieve(\"Alpha\", topk=5, index_name=\"tag_A_index\")\n</code></pre>"},{"location":"get_start/quickstart/#5-collection","title":"(5). \u6301\u4e45\u5316 Collection \u81f3\u672c\u5730","text":"<pre><code>mgr.store_collection()\nprint(\"Saved to:\", mgr.data_dir)\n</code></pre>"},{"location":"get_start/quickstart/#6-collection","title":"(6). \u91cd\u65b0\u52a0\u8f7d Collection","text":"<pre><code>mgr2 = MemoryManager()\nembedder2 = MockTextEmbedder(fixed_dim=16)\ncol2 = mgr2.connect_collection(\"test_vdb\", embedding_model=embedder2)\n</code></pre>"},{"location":"get_start/quickstart/#7","title":"(7). \u5220\u9664\u6240\u6709\u672c\u5730\u6570\u636e\uff08\u53ef\u9009\uff09","text":"<pre><code>from sage.core.neuromem.memory_collection.vdb_collection import VDBMemoryCollection\nimport os\n\nVDBMemoryCollection.clear(\"test_vdb\", mgr.data_dir)\nmanager_json = os.path.join(mgr.data_dir, \"manager.json\")\nif os.path.exists(manager_json):\n    os.remove(manager_json)\n</code></pre>"},{"location":"get_start/quickstart/#fluent-api-rag","title":"\ud83d\udd27 \u4f7f\u7528 Fluent API \u6784\u5efa RAG \u6d41\u6c34\u7ebf","text":"<p>SAGE \u63d0\u4f9b\u58f0\u660e\u5f0f\u3001\u53ef\u7ec4\u5408\u7684 API \u63a5\u53e3\u6784\u5efa\u6570\u636e\u6d41\uff0c\u4ee5\u4e0b\u4e3a\u5178\u578b RAG \u7ba1\u7ebf\uff1a</p> <pre><code>from sage import Environment, FileSource, DenseRetriever, QAPromptor, OpenAIGenerator, TerminalSink\n\npipeline = Environment(name=\"example_pipeline\", use_ray=False)\n\nquery_stream = (pipeline\n   .from_source(FileSource, config)\n   .map(DenseRetriever, config)\n   .map(QAPromptor, config)\n   .map(OpenAIGenerator, config)\n   .sink(TerminalSink, config)\n   )\n\n# \u63d0\u4ea4\u4efb\u52a1\npipeline.submit(config={\"is_long_running\": False})\n</code></pre>"},{"location":"get_start/quickstart/#config","title":"\ud83d\udcd8 config \u914d\u7f6e\u8bf4\u660e","text":"<p>\u6bcf\u4e2a Operator \u7684\u8fd0\u884c\u9700\u4f20\u5165 config \u53c2\u6570\uff0c\u4f60\u53ef\u5728\u9879\u76ee\u4e2d\u7684 <code>config/</code> \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u793a\u4f8b\u3002</p>"},{"location":"get_start/quickstart/#ray","title":"\ud83d\udcd8 \u5206\u5e03\u5f0f\u6267\u884c\uff08Ray\uff09","text":"<p>\u82e5\u9700\u542f\u7528\u5206\u5e03\u5f0f\u6267\u884c\uff0c\u53ea\u9700\u8bbe\u7f6e\uff1a</p> <pre><code>pipeline = Environment(name=\"example_pipeline\", use_ray=True)\n</code></pre>"},{"location":"get_start/quickstart/#_2","title":"\ud83d\udcd8 \u957f\u751f\u547d\u5468\u671f\u670d\u52a1","text":"<p>\u82e5\u7ba1\u7ebf\u9700\u957f\u671f\u8fd0\u884c\uff0c\u8bf7\u8bbe\u7f6e\uff1a</p> <pre><code>pipeline.submit(config={\"is_long_running\": True})\n</code></pre>"},{"location":"get_start/quickstart/#_3","title":"\u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879","text":"<p>!!! warning \"\u6a21\u5757\u8def\u5f84\u53d8\u5316\u63d0\u793a\"     \u82e5\u4f60\u57fa\u4e8e\u4e0d\u540c\u7248\u672c\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u90e8\u5206\u6a21\u5757\u8def\u5f84\u6216\u53c2\u6570\u53ef\u80fd\u6709\u6240\u8c03\u6574\u3002\u8bf7\u53c2\u9605 [<code>mkdocs.yml</code>] \u4e2d Reference \u533a\u7684\u6700\u65b0 API \u6587\u6863\u3002</p>"},{"location":"get_start/quickstart/#_4","title":"\ud83e\udde0 \u66f4\u591a\u5efa\u8bae","text":"<ul> <li>\u82e5\u5e0c\u671b\u4f7f\u7528 YAML \u914d\u7f6e\u8fd0\u884c\u6d41\u6c34\u7ebf\uff0c\u8bf7\u53c2\u9605 Dashboard \u6a21\u5757\u4e0e\u7f16\u8bd1\u5668\u90e8\u5206\u3002</li> <li>\u82e5\u5e0c\u671b\u81ea\u5b9a\u4e49 Operator\uff08\u5982 Embedding\u3001Retrieval\u3001Ranking\uff09\uff0c\u8bf7\u524d\u5f80 <code>operator</code> \u6a21\u5757\u9605\u8bfb\u8be6\u7ec6\u63a5\u53e3\u8bf4\u660e\u3002</li> </ul> <p>\u5982\u9700\u83b7\u53d6\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u524d\u5f80 Examples \u9875\u9762\u3002</p>"},{"location":"reference/sage/api/memory/","title":"Neuromem Memory API \u4f7f\u7528\u8bf4\u660e","text":""},{"location":"reference/sage/api/memory/#_1","title":"\u80cc\u666f","text":"<p>Neuromem \u662f\u4e00\u4e2a\u5185\u5b58\u63a7\u5236\u5c42\uff0c\u4ecb\u4e8e\u5e95\u5c42\u7d22\u5f15\u3001\u6570\u636e\u5b58\u50a8\u4e0e\u4e0a\u5c42\u5e94\u7528\u4e4b\u95f4\u3002\u5b83\u901a\u8fc7 <code>MemoryManager</code> \u7ba1\u7406 <code>Collection</code> \u7684\u751f\u547d\u5468\u671f\uff0c<code>Collection</code> \u662f\u5177\u4f53\u5b58\u50a8\u6570\u636e\u548c\u521b\u5efa\u7d22\u5f15\u7684\u5355\u5143\u3002\u7528\u6237\u901a\u8fc7 API \u5411 <code>MemoryManager</code> \u7533\u8bf7\u670d\u52a1\uff0c\u64cd\u4f5c\u4e0d\u540c\u7c7b\u578b\u7684 <code>Collection</code>\u3002</p>"},{"location":"reference/sage/api/memory/#_2","title":"\u529f\u80fd\u6982\u8ff0","text":"<ul> <li>MemoryManager: \u5355\u4f8b\u6a21\u5f0f\uff0c\u8d1f\u8d23\u7ba1\u7406\u6240\u6709 <code>Collection</code> \u7684\u521b\u5efa\u548c\u8bbf\u95ee\u3002</li> <li>Collection: \u6570\u636e\u5b58\u50a8\u5355\u5143\uff0c\u652f\u6301\u4e24\u79cd\u7c7b\u578b\uff1a</li> <li>VDB: \u5411\u91cf\u6570\u636e\u5e93\uff0c\u9002\u5408\u9700\u8981\u5d4c\u5165\u6a21\u578b\u7684\u573a\u666f\u3002</li> <li>KV: \u952e\u503c\u5b58\u50a8\uff0c\u9002\u5408\u7b80\u5355\u952e\u503c\u5bf9\u5b58\u50a8\u3002</li> <li>API \u529f\u80fd: \u521b\u5efa\u3001\u83b7\u53d6 <code>Collection</code>\uff0c\u652f\u6301\u672c\u5730\u6216\u8fdc\u7a0b\uff08Ray Actor\uff09\u6a21\u5f0f\u3002</li> <li>Embedding \u6a21\u578b: \u7528\u4e8e VDB \u7c7b\u578b <code>Collection</code> \u7684\u5411\u91cf\u5d4c\u5165\uff0c\u652f\u6301\u591a\u79cd\u9884\u8bad\u7ec3\u6a21\u578b\u3002</li> </ul>"},{"location":"reference/sage/api/memory/#_3","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"reference/sage/api/memory/#1-memorymanager","title":"1. \u83b7\u53d6 MemoryManager","text":"<p>\u901a\u8fc7 <code>get_manager()</code> \u83b7\u53d6\u5168\u5c40\u552f\u4e00\u7684 <code>MemoryManager</code> \u5b9e\u4f8b\uff1a</p> <pre><code>from sage_memory.memory_api import get_manager\n\nmanager = get_manager()\n</code></pre>"},{"location":"reference/sage/api/memory/#2-collection","title":"2. \u83b7\u53d6\u6216\u521b\u5efa Collection","text":"<p>\u4f7f\u7528 <code>get_memory()</code> \u65b9\u6cd5\u83b7\u53d6\u6216\u521b\u5efa <code>Collection</code>\uff0c\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a - <code>config</code>: \u5b57\u5178\uff0c\u914d\u7f6e <code>Collection</code> \u7684\u53c2\u6570\u3002 - <code>remote</code>: \u5e03\u5c14\u503c\uff0c\u662f\u5426\u4ee5 Ray Actor \u6a21\u5f0f\u8fd0\u884c\uff08\u9ed8\u8ba4 <code>False</code>\uff09\u3002 - <code>env_name</code>: \u53ef\u9009\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u73af\u5883\u540d\u79f0\u3002</p>"},{"location":"reference/sage/api/memory/#_4","title":"\u914d\u7f6e\u793a\u4f8b","text":"<ul> <li>VDB \u7c7b\u578b Collection\uff08\u4f7f\u7528 <code>embed-english-light-v3.0</code> \u6a21\u578b\uff09:</li> </ul> <pre><code>config = {\n    \"collection_name\": \"memprompt_collection\",\n    \"backend_type\": \"VDB\",\n    \"embedding_model_name\": \"embed-english-light-v3.0\",\n    \"dim\": 384,\n    \"description\": \"A collection for locomo experiment\"\n}\n</code></pre> <ul> <li>KV \u7c7b\u578b Collection:</li> </ul> <pre><code>config = {\n    \"collection_name\": \"kvtest_collection\",\n    \"backend_type\": \"KV\",\n    \"description\": \"A collection for key-value storage\"\n}\n</code></pre>"},{"location":"reference/sage/api/memory/#_5","title":"\u8c03\u7528\u793a\u4f8b","text":"<pre><code>from sage_memory.memory_api import get_memory\n\n# \u83b7\u53d6\u6216\u521b\u5efa VDB Collection\uff08\u4f7f\u7528 jina-embeddings-v3\uff09\ncollection = get_memory(config={\n    \"collection_name\": \"memprompt_collection\",\n    \"backend_type\": \"VDB\",\n    \"embedding_model_name\": \"jina-embeddings-v3\",\n    \"dim\": 1024,\n    \"description\": \"A collection for locomo experiment\"\n}, remote=False)\n\n# \u83b7\u53d6\u6216\u521b\u5efa KV Collection\ncollection = get_memory(config={\n    \"collection_name\": \"kvtest_collection\",\n    \"backend_type\": \"KV\",\n    \"description\": \"A collection for key-value storage\"\n}, remote=True, env_name=\"test_env\")\n</code></pre>"},{"location":"reference/sage/api/memory/#_6","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u5982\u679c <code>config</code> \u4e2d\u6307\u5b9a\u7684 <code>collection_name</code> \u5df2\u5b58\u5728\uff0c<code>get_memory()</code> \u5c06\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684 <code>Collection</code>\u3002</li> <li>\u5982\u679c <code>backend_type</code> \u4e0d\u662f <code>VDB</code> \u6216 <code>KV</code>\uff0c\u4f1a\u629b\u51fa <code>ValueError</code>\u3002</li> <li><code>remote=True</code> \u65f6\uff0c\u9700\u786e\u4fdd <code>CustomLogger.get_session_folder()</code> \u53ef\u7528\u4ee5\u652f\u6301 Ray Actor \u6a21\u5f0f\u3002</li> <li><code>VDB</code> \u7c7b\u578b\u9700\u8981\u6307\u5b9a <code>embedding_model_name</code> \u548c <code>dim</code>\uff0c\u4e14 <code>dim</code> \u5fc5\u987b\u4e0e\u6240\u9009\u5d4c\u5165\u6a21\u578b\u7684\u5411\u91cf\u7ef4\u5ea6\u4e00\u81f4\u3002</li> <li><code>mockembedder</code> \u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u8bf7\u4f7f\u7528\u5176\u4ed6\u6a21\u578b\u3002</li> </ul>"},{"location":"reference/sage/api/memory/#embedding","title":"Embedding \u6a21\u578b","text":"<p><code>VDB</code> \u7c7b\u578b\u7684 <code>Collection</code> \u9700\u8981\u901a\u8fc7\u5d4c\u5165\u6a21\u578b\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5411\u91cf\u3002\u4ee5\u4e0b\u662f\u652f\u6301\u7684\u5d4c\u5165\u6a21\u578b\u53ca\u5176\u5bf9\u5e94\u7684\u5411\u91cf\u7ef4\u5ea6\uff1a - mistral_embed: 1024 \u7ef4\uff0c\u9002\u7528\u4e8e\u901a\u7528\u5d4c\u5165\u573a\u666f\u3002 - embed-multilingual-v3.0: 1024 \u7ef4\uff0c\u652f\u6301\u591a\u8bed\u8a00\u6587\u672c\u5d4c\u5165\u3002 - embed-english-v3.0: 1024 \u7ef4\uff0c\u4f18\u5316\u7528\u4e8e\u82f1\u8bed\u6587\u672c\u5d4c\u5165\u3002 - embed-english-light-v3.0: 384 \u7ef4\uff0c\u8f7b\u91cf\u7ea7\u82f1\u8bed\u6587\u672c\u5d4c\u5165\u6a21\u578b\uff0c\u9002\u5408\u8d44\u6e90\u53d7\u9650\u573a\u666f\u3002 - embed-multilingual-light-v3.0: 384 \u7ef4\uff0c\u8f7b\u91cf\u7ea7\u591a\u8bed\u8a00\u6587\u672c\u5d4c\u5165\u6a21\u578b\u3002 - embed-english-v2.0: 4096 \u7ef4\uff0c\u9ad8\u7ef4\u5ea6\u82f1\u8bed\u6587\u672c\u5d4c\u5165\uff0c\u9002\u5408\u590d\u6742\u4efb\u52a1\u3002 - embed-english-light-v2.0: 1024 \u7ef4\uff0c\u8f83\u8f7b\u91cf\u7684\u82f1\u8bed\u6587\u672c\u5d4c\u5165\u6a21\u578b\u3002 - embed-multilingual-v2.0: 768 \u7ef4\uff0c\u652f\u6301\u591a\u8bed\u8a00\u7684\u5d4c\u5165\u6a21\u578b\u3002 - jina-embeddings-v3: 1024 \u7ef4\uff0c\u901a\u7528\u9ad8\u6027\u80fd\u5d4c\u5165\u6a21\u578b\u3002 - BAAI/bge-m3: 1024 \u7ef4\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u8bed\u8a00\u548c\u4efb\u52a1\u7684\u5d4c\u5165\u6a21\u578b\u3002 - sentence-transformers/all-MiniLM-L6-v2: 384 \u7ef4\uff0c\u8f7b\u91cf\u9ad8\u6548\u7684\u82f1\u8bed\u5d4c\u5165\u6a21\u578b\u3002 - mockembedder: 128 \u7ef4\uff0c\u4ec5\u7528\u4e8e\u6d4b\u8bd5\u73af\u5883\uff0c\u975e\u751f\u4ea7\u7528\u9014\u3002</p> <p>\u5728\u914d\u7f6e <code>VDB</code> \u7c7b\u578b <code>Collection</code> \u65f6\uff0c\u9700\u5728 <code>config</code> \u4e2d\u6307\u5b9a <code>embedding_model_name</code> \u548c\u5bf9\u5e94\u7684 <code>dim</code>\uff0c\u4ee5\u786e\u4fdd\u5d4c\u5165\u6a21\u578b\u4e0e\u5411\u91cf\u7ef4\u5ea6\u5339\u914d\u3002</p>"}]}